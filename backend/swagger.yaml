openapi: 3.0.0
info:
  title: Auth Service API
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local development

paths:
  /ping:
    get:
      summary: Health check
      tags: [System]
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string

  /users:
    get:
      summary: Retrieve all users
      tags: [Users]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Created — returns the new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Conflict — email or username already exists

  /users/{id}:
    get:
      summary: Retrieve a single user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/me/password:
    patch:
      summary: Update the authenticated user's password
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Bad Request — invalid input
        '401':
          description: Unauthorized — authentication required

  /auth/login:
    post:
      summary: User login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login successful — returns JWT and user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized — invalid credentials
        '400':
          description: Bad Request — missing required fields

  /auth/refresh:
    post:
      summary: Refresh access token using refresh token
      tags: [Auth]
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Unauthorized — invalid or missing refresh token

  /auth/logout:
    post:
      summary: Log out the user and clear refresh token
      tags: [Auth]
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '401':
          description: Unauthorized — authentication required

  /auth/google:
    get:
      summary: Redirect to Google OAuth2 login
      tags: [Auth]
      responses:
        '302':
          description: Redirect to Google OAuth2 authentication URL

  /auth/google/callback:
    get:
      summary: Handle Google OAuth2 callback
      tags: [Auth]
      parameters:
        - in: query
          name: code
          required: false
          schema:
            type: string
          description: Authorization code returned by Google
      responses:
        '200':
          description: Login via Google successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request — authorization code not provided

  /auth/forgot-password:
    post:
      summary: Send password reset email
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordDto'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Bad Request — missing or invalid fields

  /auth/reset-password:
    post:
      summary: Reset user's password using token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
      responses:
        '200':
          description: Password has been reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Bad Request — invalid token or fields

  /dashboard:
    get:
      summary: Retrieve authenticated user's dashboard
      tags: [Dashboard]
      responses:
        '200':
          description: Dashboard data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
        '401':
          description: Unauthorized — authentication required

  /posts:
    get:
      summary: Get all posts
      tags: [Posts]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      tags: [Posts]
      security:
        - bearerAuth: [] # ← 인증 필요 추가
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostDto'
      responses:
        '201':
          description: Created — returns new post object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request — validation failed
        '401':
          description: Unauthorized — authentication required # ← 추가

  /posts/{id}:
    get:
      summary: Get single post by ID
      tags: [Posts]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the post
      responses:
        '200':
          description: Post object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not Found — post does not exist
    patch:
      summary: Update post by ID
      tags: [Posts]
      security:
        - bearerAuth: [] # ← 인증 필요 추가
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostDto'
      responses:
        '200':
          description: Updated — returns updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request — validation failed
        '401':
          description: Unauthorized — authentication required # ← 추가
        '404':
          description: Not Found — post does not exist
    delete:
      summary: Delete post by ID
      tags: [Posts]
      security:
        - bearerAuth: [] # ← 인증 필요 추가
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the post
      responses:
        '204':
          description: No Content — post deleted successfully
        '401':
          description: Unauthorized — authentication required # ← 추가
        '404':
          description: Not Found — post does not exist

components:
  securitySchemes:
    bearerAuth: # ← 인증 스키마 추가
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateUserDto:
      type: object
      required:
        - username
        - email
        - name
      properties:
        username:
          type: string
          description: User-defined login ID
        email:
          type: string
          format: email
          description: Unique email address
        name:
          type: string
        provider:
          type: string
          enum: [local, google]
          default: local
          description: Signup provider. If 'local', password is required. If 'google', password must NOT be present.
        password:
          type: string
          writeOnly: true
          minLength: 6
          nullable: true
          description: "Required if provider is 'local'. Forbidden if provider is 'google'."
        googleId:
          type: string
          description: "Google unique user ID (required if provider is 'google')"

    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
      example:
        id: '636d1234abcd5678ef901234'
        username: 'default-user'
        email: 'default@example.com'
        name: 'Default Name'

    CreateSocialUserDto:
      type: object
      required:
        - email
        - name
        - username
        - provider
        - googleId
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        username:
          type: string
        provider:
          type: string
          enum: [google]
        googleId:
          type: string

    LoginDto:
      type: object
      required:
        - password
      properties:
        email:
          type: string
          format: email
          description: Optional email to login
        username:
          type: string
          description: Optional username to login
        password:
          type: string
          writeOnly: true
          description: User password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
        user:
          $ref: '#/components/schemas/User'

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: New JWT access token

    ForgotPasswordDto:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          description: Username or email to send reset link

    ResetPasswordDto:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset JWT token
        newPassword:
          type: string
          description: New password for the user

    UpdatePasswordDto:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current user password
        newPassword:
          type: string
          description: New password to set

    ResponseMessage:
      type: object
      properties:
        message:
          type: string
          description: Informational message

    DashboardResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/User'

    CreatePostDto:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
        authorId:
          type: string

    UpdatePostDto:
      type: object
      properties:
        title:
          type: string
        content:
          type: string

    Post:
      allOf:
        - $ref: '#/components/schemas/CreatePostDto'
        - type: object
          properties:
            id:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
