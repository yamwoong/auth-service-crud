name: CI/CD Deploy

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      # 1) Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Load SSH key
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3) Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" |
            docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # Debug: Docker variables
      - name: Debug Docker variables
        run: |
          echo "DOCKER_USERNAME='${{ secrets.DOCKER_USERNAME }}'"
          echo "IMAGE_TAG='${{ env.IMAGE_TAG }}'"

      # 4) Build & push backend image
      - name: Build and push backend image
        working-directory: backend
        run: |
          echo "Building backend image: \"${{ secrets.DOCKER_USERNAME }}/auth-service-backend:${{ env.IMAGE_TAG }}\""
          docker build \
            -t "${{ secrets.DOCKER_USERNAME }}/auth-service-backend:${{ env.IMAGE_TAG }}" \
            -t "${{ secrets.DOCKER_USERNAME }}/auth-service-backend:latest" .
          docker push "${{ secrets.DOCKER_USERNAME }}/auth-service-backend:${{ env.IMAGE_TAG }}"
          docker push "${{ secrets.DOCKER_USERNAME }}/auth-service-backend:latest"

      # 5) Build & push frontend image
      - name: Build and push frontend image
        working-directory: frontend
        run: |
          echo "Building frontend image: \"${{ secrets.DOCKER_USERNAME }}/auth-service-frontend:${{ env.IMAGE_TAG }}\""
          docker build \
            --build-arg VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }} \
            --build-arg VITE_FRONTEND_URL=${{ secrets.FRONTEND_URL }} \
            -t "${{ secrets.DOCKER_USERNAME }}/auth-service-frontend:${{ env.IMAGE_TAG }}" \
            -t "${{ secrets.DOCKER_USERNAME }}/auth-service-frontend:latest" .
          docker push "${{ secrets.DOCKER_USERNAME }}/auth-service-frontend:${{ env.IMAGE_TAG }}"
          docker push "${{ secrets.DOCKER_USERNAME }}/auth-service-frontend:latest"

      # 6) Add EC2 host to known_hosts
      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      # 7) SSH connection test (fast-fail)
      - name: SSH connection test
        run: |
          ssh -vvv \
            -o ConnectTimeout=5 \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            exit

      # 8) Deploy to EC2 via deploy.sh (with development env)
      - name: Deploy to EC2 via deploy.sh
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export NODE_ENV=${{ secrets.NODE_ENV }}
          export PORT=${{ secrets.PORT }}
          export MONGODB_URI=${{ secrets.MONGODB_URI }}
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          export JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          export JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          export REDIS_URL=${{ secrets.REDIS_URL }}
          export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          export GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}
          export FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          export GMAIL_CLIENT_ID=${{ secrets.GMAIL_CLIENT_ID }}
          export GMAIL_CLIENT_SECRET=${{ secrets.GMAIL_CLIENT_SECRET }}
          export GMAIL_REFRESH_TOKEN=${{ secrets.GMAIL_REFRESH_TOKEN }}
          export GMAIL_USER=${{ secrets.GMAIL_USER }}
          export RESET_PASSWORD_URL=${{ secrets.RESET_PASSWORD_URL }}
          bash -s < ./deploy.sh
          EOF
